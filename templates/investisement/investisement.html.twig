{% extends 'base.html.twig' %}

{% block title %}Home - Purple Social
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="{{ asset('css/investisementA.css') }}">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
{% endblock %}
{% set userid = app.session.get('user_id') %}
{% set user = app.session.get('user') %}
{% block body %}
	{% include 'components/navbar1.html.twig' %}
	{% include 'components/sidebar.html.twig' %}
    <script>
    function openMessageModal(id) {
    document.getElementById("messageModal" + id).style.display = "block";
}
function closeMessageModal(id) {
    document.getElementById("messageModal" + id).style.display = "none";
}
document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.like-btn').forEach(button => {
    button.addEventListener('click', function () {
        // Get the investment ID and user ID from the button's data attributes
        const investmentId = this.getAttribute('data-investment-id');
        const userId = this.getAttribute('data-user-id');

        // Make the POST request to toggle the like
        fetch(`/investment/toggle/${userId}/${investmentId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'added') {
                // Handle investment being liked (e.g., change button text/icon)
                console.log('test');
                this.textContent = '‚ù§Ô∏è Unfavorite';
            } else if (data.status === 'removed') {
                // Handle investment being unliked (e.g., change button text/icon)
                this.textContent = 'ü§ç Favorite';
            }
        })
        .catch(error => console.error('Error:', error));
    });
});

    function sortInvestments(order) {
        let container = document.querySelector('.post-container');
        let investments = Array.from(container.getElementsByClassName('main-wrapper'));

        investments.sort((a, b) => {
            if (order === 'asc' || order === 'desc') {
                let dateA = new Date(a.querySelector('.date-time').textContent.trim());
                let dateB = new Date(b.querySelector('.date-time').textContent.trim());
                return order === 'asc' ? dateA - dateB : dateB - dateA;
            } else if (order === 'most_liked' || order === 'least_liked') {
                let likesA = parseInt(a.querySelector('.like-count').textContent.trim(), 10);
                let likesB = parseInt(b.querySelector('.like-count').textContent.trim(), 10);
                return order === 'most_liked' ? likesB - likesA : likesA - likesB;
            }
        });

        investments.forEach(investment => container.appendChild(investment));
    }

    window.sortInvestments = sortInvestments;
});
    </script>
   
	<div class="post-container">
    
     <div class="test">
       <div class="sort-container">
       
        <select id="sort-select" onchange="sortInvestments(this.value)">
            <option value="desc">R√©cent ‚Üí Ancien</option>
            <option value="asc">Ancien ‚Üí R√©cent</option>
            <option value="most_liked">Plus de likes ‚Üí Moins de likes</option>
            <option value="least_liked">Moins de likes ‚Üí Plus de likes</option>
            {{dump(userid)}}
            
        </select>
        </div>
    </div>
		{% for investment in investments %}
			<div class="main-wrapper">
				<div class="investment-box">
					<div class="profile-section">
						<img src="{{ asset('uploads/profile_images/' ~ investment.user.getProfileImage()) }}" alt="Profile" class="profile-img">
						<div class="profile-info">
							<h4>{{ investment.user.username }}</h4>
						</div>
						<!-- Message icon -->
						<div class="message-icon-container" data-investment-id="{{ investment.id }}">
                           <button class="button" onclick="openMessageModal({{ investment.id }})">
        <div class="outline"></div>
        <div class="state state--default">
            <div class="icon">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" height="1.2em" width="1.2em">
                    <g style="filter: url(#shadow)">
                        <path fill="currentColor" d="M14.2199 21.63C13.0399 21.63 11.3699 20.8 10.0499 16.83L9.32988 14.67L7.16988 13.95C3.20988 12.63 2.37988 10.96 2.37988 9.78001C2.37988 8.61001 3.20988 6.93001 7.16988 5.60001L15.6599 2.77001C17.7799 2.06001 19.5499 2.27001 20.6399 3.35001C21.7299 4.43001 21.9399 6.21001 21.2299 8.33001L18.3999 16.82C17.0699 20.8 15.3999 21.63 14.2199 21.63ZM7.63988 7.03001C4.85988 7.96001 3.86988 9.06001 3.86988 9.78001C3.86988 10.5 4.85988 11.6 7.63988 12.52L10.1599 13.36C10.3799 13.43 10.5599 13.61 10.6299 13.83L11.4699 16.35C12.3899 19.13 13.4999 20.12 14.2199 20.12C14.9399 20.12 16.0399 19.13 16.9699 16.35L19.7999 7.86001C20.3099 6.32001 20.2199 5.06001 19.5699 4.41001C18.9199 3.76001 17.6599 3.68001 16.1299 4.19001L7.63988 7.03001Z"></path>
                    </g>
                    <defs>
                        <filter id="shadow">
                            <feDropShadow flood-opacity="0.6" stdDeviation="0.8" dy="1" dx="0"></feDropShadow>
                        </filter>
                    </defs>
                </svg>
            </div>
            <p>
                <span style="--i:0">S</span>
                <span style="--i:1">e</span>
                <span style="--i:2">n</span>
                <span style="--i:3">d</span>
                <span style="--i:4"> </span>
                <span style="--i:5">M</span>
                <span style="--i:6">e</span>
                <span style="--i:7">s</span>
                <span style="--i:8">s</span>
                <span style="--i:9">a</span>
                <span style="--i:10">g</span>
                <span style="--i:11">e</span>
            </p>
        </div>
    </button>
                        </div>
                <button class="like-btn" data-investment-id="{{ investment.id }}" data-user-id="{{ userid }}">
                    {% if investment%}
                        ‚ù§Ô∏è Unfavorite
                    {% else %}
                        ü§ç Favorite
                    {% endif %}
                </button>

						<div class="date-time">{{investment.getCreatedAt()|date('Y-m-d H:i:s')}}</div>
					</div>

					<div class="investment-content" data-investment-id="{{ investment.id }}">
						{{ investment.content }}
					</div>

					<!-- Investment details section -->
					<div
						class="investment-details" id="details-{{ investment.id }}">
						<!-- Returns will be injected here -->
						<div class="returns-section" id="returns-{{ investment.id }}">
							<h4>Returns</h4>
							<div class="returns-list"></div>
						</div>
					</div>
                                                <div class="like-section">
                        <form method="POST" action="{{ path('investment_like', {'id': investment.id}) }}" class="like-form">
                            <button type="submit" class="like-button {% if investment.isLikedByUser(app.user) %}liked{% endif %}">
                                <i class="fas fa-heart"></i>
                                <span class="like-count">{{ investment.likes|length }}</span>
                            </button>
                        </form>
                    </div>
				</div>
                
			</div>
			<!-- Message Modal -->
			<form method="POST" action="{{ path('chat_create', { 'id1': investment.user.getId(), 'id2': userid }) }}">
				<div class="message-modal" id="messageModal{{investment.id}}" style="display: none;">
					<div class="message-modal-content">
						<span class="message-close-btn" onclick="closeMessageModal({{investment.id}})">&times;</span>
						<div class="message-modal-header">New Message</div>
						<div class="message-modal-body">
							<p>Enter your message here{{investment.user.getId()}}</p>
							<input type="text" class="input-style" id="messageText" name="message" placeholder="Type your message">
							<input
							type="hidden" id="recipientId">
						<!-- Stocke l'ID du destinataire -->
						</div>
						<div class="message-modal-footer">
							<button class="message-modal-submit-btn" id="sendMessageBtn">Send</button>
						</div>
					</div>
				</div>
			</form>

		{% endfor %}
	</div>

	<!-- Suggested Users Sidebar -->
	<div class="suggested-users-sidebar">
		<div class="suggested-users-container">
			<div class="user-list">
								{% for user in users %}
					<div class="user-item">
						{% if user.getProfileImage() %}
							<img src="{{ asset('uploads/profile_images/' ~ user.getProfileImage()) }}" alt="Profile" class="suggested-user-img">
						{% else %}
							<img src="{{ asset('images/default-avatar.jpg') }}" alt="Default Profile" class="suggested-user-img">
						{% endif %}
						<div class="user-info">
							<h4>{{ user.username }}</h4>
							<button class="follow-btn">Follow</button>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
	</div>


	<script>
    document.addEventListener('DOMContentLoaded', function () {
    // S√©lectionner toutes les bo√Ætes d'investissement
    const investmentBoxes = document.querySelectorAll('.investment-box');
    
    // Compter le nombre de bo√Ætes d'investissement
    const investmentCount = investmentBoxes.length;

    // Afficher ce nombre dans un √©l√©ment avec la classe 'test'
    const testDiv = document.querySelector('.test');

    if (testDiv) {
        const countElement = document.createElement('div');
        countElement.classList.add('publication-count');
        countElement.innerHTML = `<p>Nombre de publications : ${investmentCount}</p>`;
        testDiv.appendChild(countElement);
    }
});

	document.addEventListener('DOMContentLoaded', function () {
    // Toggle investment details
    const investmentContents = document.querySelectorAll('.investment-content');
    investmentContents.forEach(function (investmentContent) {
        investmentContent.addEventListener('click', function () {
            const investmentBox = investmentContent.closest('.investment-box');
            const investmentDetails = investmentBox.querySelector('.investment-details');
            if (investmentDetails) {
                const currentDisplay = investmentDetails.style.display;
                investmentDetails.style.display = currentDisplay === 'block' ? 'none' : 'block';
            }
        });
    });

    // Message modal functionality
    const messageIcons = document.querySelectorAll('.message-icon');
    const modal = document.getElementById('messageModal');
    const closeModal = document.querySelector('.message-close-btn');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    const messageText = document.getElementById('messageText');
    const recipientIdInput = document.getElementById('recipientId');

    // Open modal when clicking on message icon
    

    // Close modal
    closeModal.addEventListener('click', function () {
        modal.style.display = 'none';
    });

    // Send message functionality
    sendMessageBtn.addEventListener('click', function () {
        const messageContent = messageText.value.trim();
        const recipientId = recipientIdInput.value;

        if (!messageContent) {
            alert('Please enter a message.');
            return;
        }

        fetch('/message/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sender: currentUserId, // Assuming currentUserId is available
                recipient: recipientId,
                content: messageContent
            })
        }).then(response => {
            if (!response.ok) {
                throw new Error('Error sending the message.');
            }
            return response.json();
        }).then(data => {
            alert('Message sent successfully!');
            messageText.value = ''; // Clear input
            modal.style.display = 'none'; // Close modal
        }).catch(error => {
            console.error('Error:', error);
        });
    });

    // Fetch investment returns dynamically
    investmentContents.forEach(function (investmentContent) {
        investmentContent.addEventListener('click', function () {
            const investmentDetails = investmentContent.nextElementSibling;
            if (!investmentDetails || !investmentDetails.classList.contains('investment-details')) return;

            const investmentId = investmentContent.getAttribute('data-investment-id');
            const returnsContainer = investmentDetails.querySelector('.returns-list');

            // Load returns only if not already loaded
            if (returnsContainer && returnsContainer.innerHTML.trim() === '') {
                fetch(`/api/investment/${investmentId}/returns`)
                    .then(response => response.json())
                    .then(data => {
                        returnsContainer.innerHTML = ''; // Clear previous content
                        if (data.length === 0) {
                            returnsContainer.innerHTML = '<p>No returns found for this investment.</p>';
                        } else {
                            data.forEach(returnItem => {
                                returnsContainer.innerHTML += `
                                    <div class="return-item">
                                        <p><strong>Description:</strong> ${returnItem.description}</p>
                                        <p><strong>Type:</strong> ${returnItem.typeReturn}</p>
                                        <p><strong>Tax Rendement:</strong> ${returnItem.taxRendement}</p>
                                        <p><strong>Date Deadline:</strong> ${returnItem.dateDeadline}</p>
                                        <p><strong>Status:</strong> ${returnItem.status}</p>
                                    </div>
                                `;
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching returns:', error);
                        returnsContainer.innerHTML = '<p>Error loading returns.</p>';
                    });
            }
        });
    });
});

	</script>
    <style>
   
    </style>
{% endblock %}
