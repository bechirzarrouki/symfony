{% extends 'base.html.twig' %}

{% block title %}Home - Purple Social
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="{{ asset('css/investisement.css') }}">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
	<script>
		// Sélectionne tous les éléments avec la classe .investment-content
           // Sélectionne tous les éléments avec la classe .investment-content
            document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded and parsed.");
    
    // Sélectionne tous les éléments avec la classe .investment-content
    const investmentContents = document.querySelectorAll('.investment-content');
    console.log("Found", investmentContents.length, ".investment-content elements.");

    investmentContents.forEach(function(investmentContent, index) {
        console.log(`Setting up click listener for .investment-content #${index}`);
        
        investmentContent.addEventListener('click', function() {
            console.log(".investment-content clicked.");
            
            // Trouve l'élément .investment-details correspondant à l'élément cliqué
            const investmentDetails = investmentContent.nextElementSibling;
            if (!investmentDetails) {
                console.warn("No .investment-details found next to clicked .investment-content");
                return;
            }
            if (!investmentDetails.classList.contains('investment-details')) {
                console.warn("Next sibling is not .investment-details");
                return;
            }
            
            console.log("Toggling .investment-details visibility.");
            const currentDisplay = investmentDetails.style.display;
            investmentDetails.style.display = currentDisplay === 'block' ? 'none' : 'block';
            
            // Get the investment ID from a data attribute
            const investmentId = investmentContent.getAttribute("data-investment-id");
            console.log("Investment ID:", investmentId);
            if (!investmentId) {
                console.error("Investment ID is missing!");
                return;
            }

            const returnsContainer = investmentDetails.querySelector(".returns-list");
            if (!returnsContainer) {
                console.error("No .returns-list found inside .investment-details");
                return;
            }

            // Fetch returns only if they are not already loaded
            if (returnsContainer.innerHTML.trim() === "") {
                console.log("Fetching returns for investment ID:", investmentId);
                fetch(`/api/investment/${investmentId}/returns`)
                    .then(response => {
                        console.log("Received response from API.", response);
                        return response.json();
                    })
                    .then(data => {
                        console.log("Received data:", data);
                        returnsContainer.innerHTML = ""; // Clear previous content

                        if (data.length === 0) {
                            console.log("No returns found for this investment.");
                            returnsContainer.innerHTML = "<p>No returns found for this investment.</p>";
                        } else {
                            data.forEach((returnItem, itemIndex) => {
                                console.log(`Processing return item #${itemIndex}:`, returnItem);
                                returnsContainer.innerHTML += `
                                    <div class="return-item">
                                        <p><strong>Description:</strong> ${returnItem.description}</p>
                                        <p><strong>Type:</strong> ${returnItem.typeReturn}</p>
                                        <p><strong>Tax Rendement:</strong> ${returnItem.taxRendement}</p>
                                        <p><strong>Date Deadline:</strong> ${returnItem.dateDeadline}</p>
                                        <p><strong>Status:</strong> ${returnItem.status}</p>                                            
                                        <div class="options-menu">
                                            <i class="fas fa-ellipsis-v" onclick="toggleOptionsMenu1(event)"></i>
                                            <div class="options-dropdown1">
											<button onclick="openEditReturn(${returnItem.id})">Edit</button>
                                                <button onclick="openDeleteReturn(${returnItem.id})">Delete</button>
                                            </div>
                                        </div>

                                        <!-- Delete Confirmation Modal -->
                                        <div id="deleteReturn${returnItem.id}" class="modal">
                                            <div class="modal-content">
                                                <h3>Do you really want to delete this investment?</h3>
                                                <form action="/return/${returnItem.id}/delete" method="POST">
                                                    <button type="submit" class="submit-btn">Delete</button>
                                                </form>
                                                <button class="submit-btn" onclick="closeDeletereturn(${returnItem.id})">Cancel</button>
                                            </div>
                                        </div>
										<div id="editReturnModal${returnItem.id}" class="modal">
											<form action="/return/${returnItem.id}/edit" method="POST">
													<div class="modal-content">
																		<span class="close-btn" onclick="closeEditReturnModal(${returnItem.id})">&times;</span>
																		<h3>Edit Return</h3>
																		<input type="text" id="editDescription${
															returnItem.id
															}" name="description" class="input-style" value="${
															returnItem.description
															}" required>
																		<input type="text" id="editTypeReturn${
															returnItem.id
															}" name="typeReturn" class="input-style" value="${
															returnItem.typeReturn
															}" required>
																		<input type="number" id="editTaxRendement${
															returnItem.id
															}" name="taxRendement" class="input-style" value="${
															returnItem.taxRendement
															}" required pattern="^\d+(\.\d{1,2})?$">
																		<input type="date" id="editDateDeadline${
															returnItem.id
															}" name="dateDeadline" class="input-style" value="${
															returnItem.dateDeadline
															}" required>
																		<input type="text" id="editStatus${
															returnItem.id
															}" name="status" class="input-style" value="${
															returnItem.status
															}" required>
																		<button type="submit" class="submit-btn">Save</button>
																	</div>
																</form>
															</div>
                                    </div>
                                `;
                            });
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching returns:", error);
                        returnsContainer.innerHTML =`<p>Error loading returns.</p>${error}`;
                    });
            }
        });
    });
});

// Add event listener for the options menu to stop propagation
const optionsMenus = document.querySelectorAll(".options-menu");
optionsMenus.forEach(function (menu) {
menu.addEventListener("click", function (event) { // Prevents the click from propagating to the investment box
});
});

function toggleOptionsMenu1(event) {
event.stopPropagation();
const dropdown = event.target.nextElementSibling;
document.querySelectorAll('.options-dropdown1').forEach(menu => {
if (menu !== dropdown) 
menu.classList.remove('show');

});
dropdown.classList.toggle('show');
}


function openEditReturn(returnId) {
const modal = document.getElementById (`editReturnModal${returnId}`);
if (modal) {
modal.style.display = "block";
}
}

function closeEditReturn(returnId) {
const modal = document.getElementById (`editReturnModal${returnId}`);
if (modal) {
modal.style.display = "none";
}
}
function toggleType(element) {
       const currentDisplay = element.style.display;

    if (currentDisplay === "none" || currentDisplay === "") {
        element.style.display = "block";
    } else {
        element.style.display = "none";
    }
}
	</script>
	<style>


		.close-btn {
			position: absolute;
			top: 10px;
			right: 15px;
			font-size: 24px;
			cursor: pointer;
		}
		.investment-details {
			width: 500px;
			background: #f4f2ee;
			border-radius: 10px;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
			padding: 20px;
			display: none;
			margin-top: 10px;
			font-size: 14px;
			border-left: 4px solid #53348D;
		}
		.submit-btn {
			width: 100%;
			padding: 10px;
			background-color: #53348D;
			border: 5%;
			color: white;
			font-size: 16px;
			cursor: pointer;
			margin-top: 10px;
		}

		.submit-btn:hover {
			background-color: #53348D;
		}

		/* Style général des champs d'entrée */
		.input-style {
			width: 100%;
			padding: 12px;
			border: 2px solid #ccc;
			border-radius: 8px;
			font-size: 16px;
			color: #333;
			outline: none;
			transition: all 0.3s ease-in-out;
			background-color: #f9f9f9;
		}

		/* Effet au focus */
		.input-style:focus {
			border-color: #53348D;
			box-shadow: 0 0 8px rgba(83, 52, 141, 0.3);
			background-color: #fff;
		}


		/* Animation d'apparition */
		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: scale(0.9);
			}
			to {
				opacity: 1;
				transform: scale(1);
			}
		}

		/* Bouton de fermeture */
		.close-btn {
			position: absolute;
			top: 15px;
			right: 20px;
			font-size: 24px;
			cursor: pointer;
			color: #666;
			transition: 0.3s;
		}

		.close-btn:hover {
			color: #000;
		}


		.close-btn {
			position: absolute;
			top: 10px;
			right: 15px;
			font-size: 24px;
			cursor: pointer;
		}


		.type-option {
			display: inline-block;
			padding: 10px 15px;
			margin: 5px;
			border-radius: 5px;
			cursor: pointer;
			background: #53348D;
			transition: background 0.3s, color 0.3s;
			font-weight: bold;
		}

		.type-option.selected {
			background: #007bff;
			color: #fff;
		}

		/* Champs et boutons du modal */
		#selected-types {
			width: 100%;
			padding: 10px;
			border: 1px solid #ccc;
			border-radius: 5px;
			background: #f1f1f1;
			margin-bottom: 10px;
		}
		.modal {
			display: none;
		}
	</style>
{% endblock %}
{% block javascripts %}
	<script src="{{ asset('js/investisement.js') }}"></script>

{% endblock %}

{% block body %}
	{% include 'components/navbar.html.twig' %}
	<div class="main-wrapper">
		{% include 'components/sidebar.html.twig' %}

		<div class="post-container">
			<div class="create-post">
				<form action="/investment/new" method="post" id="investmentForm" onsubmit="return validateForm(event)">
					<h2>Create Your Investment</h2>
					<div class="post-input-wrapper">
						<input id="content" type="text" class="form-control" name="content" placeholder="what do you have in your mind ?">
						<button type="button" class="investment-type" onclick="openModal('typeModal')">choose a type</button>
						<div class="post-input-wrapper p-3"></div>

						<!-- Modal de sélection des types -->
						<div id="typeModal" class="modal">
							<div class="modal-content">
								<span class="close-btn" onclick="closeModal('typeModal')">&times;</span>
								<h2>select  type</h2>
								<div id="type-list">
									<span class="type-option" data-value="Immobilier" onclick="toggleType(this)">Immobilier</span>
									<span class="type-option" data-value="Actions" onclick="toggleType(this)">Actions</span>
									<span class="type-option" data-value="Obligations" onclick="toggleType(this)">Obligations</span>
									<span class="type-option" data-value="Cryptomonnaies" onclick="toggleType(this)">Cryptomonnaies</span>
								</div>
								<button type="button" class="submit-btn" id="validateSelection" onclick="selectTypes()">Valider</button>
							</div>
							<div id="errorMessageInv" style="color: red; display: none;">correct the form</div>
						</div>
					</div>
					<div class="post-actions">
						<button type="button" class="action-btn add-btn" onclick="openModal('retourModal')">
							<i class="fas fa-plus"></i>
							Add a return
						</button>
						<button type="submit" class="publish-btn">
							<i class="fas fa-paper-plane"></i>
							Post
						</button>
					</div>
				</div>
				<form id="form" onsubmit="return validateForm(event)">
    <div id="retourModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('retourModal')">&times;</span>

            <input id="description" name="description" placeholder="Description" class="input-style" type="text" >
            <input id="typeRetour" name="typeReturn" placeholder="Return Type" class="input-style" type="text">
            <input id="tauxRendement" name="taxRendement" placeholder="Rate of Return" class="input-style" type="text" >
            <input id="date_deadline" name="dateDeadline" placeholder="Deadline" class="input-style" type="date" >
            <input id="status" name="status" placeholder="Status" class="input-style" type="text">
            <button type="submit" class="submit-btn">Send</button>

            <div id="errorMessage" style="color: red; display: none;">Please fill out all fields correctly.</div>
        </div>
    </div>
</form>

			</form>
			<!-- L'investment-box est maintenant sous create-post mais toujours dans post-container -->
			{% for investment in investments %}
				<div class="investment-box">
    <div class="profile-section">
        <img src="{{ asset('images/avatar.jpg') }}" alt="Profile" class="profile-img">
        <div class="profile-info">
            <h4>{{ investment.user.username }}</h4>
        </div>
        <div class="date-time">10/02/2025 - 14:30</div>
        <div class="options-menu">
            <i class="fas fa-ellipsis-v" onclick="toggleOptionsMenu(event)"></i>
            <div class="options-dropdown">
                <button onclick="openDeleteModal({{ investment.id }})">Delete</button>
            </div>
        </div>
    </div>

    <div class="investment-content" data-investment-id="{{ investment.id }}">
        {{ investment.content }}
    </div>

    <!-- Investment details section -->
    <div class="investment-details" id="details-{{ investment.id }}">
        <!-- Returns will be injected here -->
        <div class="returns-section" id="returns-{{ investment.id }}">
            <h4>Returns</h4>
            <div class="returns-list"></div>
        </div>
    </div>
</div>

				<div id="editModal{{investment.id}}" class="modal">
					<form action="{{ path('investment_edit', { id: investment.id }) }}" method="POST">
						<div class="modal-content">
							<span class="close-btn" onclick="closeEditModal({{ investment.id }})">&times;</span>
							<h3>Edit Investment</h3>
							<input type="text" id="editName" name="content" class="input-style" value="{{ investment.content }}">
							<button type="submit" class="submit-btn">Save</button>
						</div>
					</form>
				</div>


				<!-- Delete Modal -->
				<div id="deleteModal{{ investment.id }}" class="modal">
					<div class="modal-content">
						<h3>Do you really want to delete this investment?</h3>
						<form action="{{ path('investment_delete', { id: investment.id }) }}" method="POST">
							<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ investment.id) }}">
							<button type="submit" class="submit-btn">Delete</button>
						</form>
						<button class="submit-btn" onclick="closeDeleteModal('{{ investment.id }}')">Cancel</button>
					</div>
				</div>
			{% endfor %}
		</div>
	</div>
</div></div><style>
.modal {
    display: none; /* Par défaut, le modal est masqué */
}

.modal.show {
    display: flex; /* Ou 'block', en fonction de ton design */
}
.options-menu {
	position: relative;
}
.options-dropdown {
	display: none;
	position: absolute;
	right: 0;
	top: 100%;
	background: white;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
	border-radius: 5px;
	padding: 5px;
	z-index: 1000;
}

.options-dropdown.show {
	display: block;
}

.options-dropdown button {
	display: block;
	width: 100%;
	padding: 8px 12px;
	border: none;
	background: none;
	text-align: left;
	cursor: pointer;
}

.options-dropdown button:hover {
	background: #f0f0f0;
}
.options-dropdown1 {
	display: none;
	position: absolute;
	right: 0;
	top: 100%;
	background: white;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
	border-radius: 5px;
	padding: 5px;
	z-index: 1000;
}

.options-dropdown1.show {
	display: block;
}

.options-dropdown1 button {
	display: block;
	width: 100%;
	padding: 8px 12px;
	border: none;
	background: none;
	text-align: left;
	cursor: pointer;
}

.options-dropdown1 button:hover {
	background: #f0f0f0;
}
.modal {
    display: none;  /* Modale cachée par défaut */
    position: fixed;
    z-index: 1000;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    align-items: center;
    justify-content: center;
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    width: 90%;
    max-width: 400px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
    text-align: center;
    position: relative;
}

.investment-content {
	margin-top: 15px;
	padding: 10px;
	background: #f9f9f9;
	border-radius: 5px;
	font-size: 14px;
	color: #333;
	border-left: 4px solid #53348D;
}

.close-btn {
	position: absolute;
	top: 10px;
	right: 15px;
	font-size: 24px;
	cursor: pointer;
}</style><script></script>{% endblock %}
